#+title: Emacs init file
#+author: Asilata Bapat
#+property: header-args :tangle "~/.emacs.d/init.el" :results silent

* Initial boilerplate
Define values for the top-level emacs directory (~.emacs.d~), as well as the  subdirectories for optional packages and machine-local configuration.
#+begin_src emacs-lisp
  (require 'cl-lib)
  
  (unless (boundp 'user-emacs-directory)
    (defvar user-emacs-directory "~/.emacs.d/"
      "Root directory of the emacs configuration."))
  (defvar user-opt-directory (concat user-emacs-directory "opt/")
    "User-installed Emacs packages go here.")
  (defvar local-config-directory (concat user-emacs-directory "local/")
    "Machine-local configuration files go here.")
#+end_src

Create the above directories if they don't exist.
#+begin_src emacs-lisp
  (mapc (lambda (dir)
          (unless (file-exists-p dir)
            (make-directory dir)))
        (list user-emacs-directory user-opt-directory local-config-directory))
  
  (add-to-list 'load-path user-opt-directory)
  (let ((default-directory user-opt-directory))
    (normal-top-level-add-subdirs-to-load-path))
#+end_src

I have forgotten why I had added the following bit of code.
It seems to have been a relic of the past, something about the colour of my cursor.
I am commenting it for now and may remove it later on.
*** TODO Finish configuration or delete
#+begin_src emacs-lisp
  ;; (setq inhibit-x-resources 't)
#+end_src

* Package management
I manage my emacs packages with [[https://github.com/raxod502/straight.el][straight]].
First, download and bootstrap straight as per the instructions [[https://github.com/raxod502/straight.el#getting-started][here]].
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

Install [[https://github.com/jwiegley/use-package][use-package]] if not installed.
#+begin_src emacs-lisp
(straight-use-package 'use-package)
#+end_src

* Window management
** EXWM
I use [[https://github.com/ch11ng/exwm][exwm]] as my window manager.
Begin by starting the emacs server.
#+begin_src emacs-lisp
(server-start)
#+end_src

Install exwm and load its configuration file (currently external).
#+begin_src emacs-lisp
(use-package exwm
  :straight t
  :config
  (let ((exwm-config-file (concat user-opt-directory "exwm-config-file.el")))
    (if (file-exists-p exwm-config-file)
        (load exwm-config-file)))
  (exwm-enable))
#+end_src
Install [[https://github.com/agzam/exwm-edit][exwm-edit]] so that we can edit text blocks from other programs in emacs.
#+begin_src emacs-lisp
(use-package exwm-edit
  :straight t)
#+end_src

** Ace-window
At some point I had installed [[https://github.com/abo-abo/ace-window][ace-window]]. I don't seem to be using it anymore, so I have commented it out.
*** TODO Finish configuration or delete
#+begin_src emacs-lisp
  ;; (use-package ace-window
  ;;   :straight t
  ;;   :bind (("C-x o" . ace-window))
  ;;   :custom
  ;;   (aw-keys '(?a ?o ?e ?u ?h ?t ?n ?s ?i ?d))
  ;;   (aw-minibuffer-flag t)
  ;;   :custom-face
  ;;   (aw-leading-char-face ((t (:inherit font-lock-keyword-face :bold t :height 3.0))))
  ;;   )
#+end_src

** Winner mode
Use [[https://www.emacswiki.org/emacs/WinnerMode][winner mode]] to go back and forth between windo configurations.
*** TODO Finish configuration
#+begin_src emacs-lisp
  (use-package winner
    :straight t
    :bind (("M-<left>" . winner-undo)
           ("M-<right>" . winner-redo))
    :config
    (winner-mode t))
#+end_src

** Popper
Use [[https://github.com/karthink/popper][popper]] to manage ephemeral windows as "popups".
#+begin_src emacs-lisp
  (use-package popper
    :straight t
    :bind (("C-`" . popper-toggle-latest)
           ("M-`" . popper-cycle)
           ("C-M-`" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "Output\\*$"
            "\\*Apropos\\*"
            ("\\*Async Shell Command\\*" . hide)
            help-mode
            compilation-mode
            "magit-log"
            ("magit-diff" . hide)
            "Zoom:chat"
            "\\*org-roam\\*"
            ))
    (popper-mode +1)
    (popper-echo-mode +1))
#+end_src

** Miscellaneous
Function to jump to the other window. Currently not used very much.
#+begin_src emacs-lisp
(defun flip-window ()
  (interactive)
  (let ((win (get-mru-window t t t)))
    (if win
        (progn
          (select-frame-set-input-focus (window-frame win))
          (select-window win))
      (mode-line-other-buffer))))
#+end_src

Use tab-bar-mode, and display the project name in the tab bar.
#+begin_src emacs-lisp
(defun ab/tab-bar-name ()
    (let ((project-name (projectile-project-name))
          (old-name (tab-bar-tab-name-current-with-count)))
      (if (string= "-" project-name)
          old-name
        (concat project-name ": " old-name))))

(use-package tab-bar-mode
  :bind (("s-n" . tab-next)
         ("s-p" . tab-previous))
  :config
  (setq tab-bar-tab-name-function 'ab/tab-bar-name))
#+end_src

* Buffer customizations
Remove all bells and whistles. This code is /old/, from back when I first started seriously customising emacs. I might revisit this at some point.
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)
  (line-number-mode 1)
  (column-number-mode 1)
  (size-indication-mode 1)
  (setq fill-column 90)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq visible-bell t)
  
  (if (fboundp 'fringe-mode) (fringe-mode 4))
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1)
  (setq frame-title-format
        '("" invocation-name " - " (:eval (if (buffer-file-name)
                                              (abbreviate-file-name (buffer-file-name))
                                            (buffer-name))
                                          "%b")))
#+end_src

Auto-revert buffers from files.
#+begin_src emacs-lisp
  (setq global-auto-revert-mode 1)
  (setq auto-revert-interval 3600)
#+end_src

Uniquify buffer names.
#+begin_src emacs-lisp
(use-package uniquify
  :config
  (setq uniquify-buffer-name-style 'forward
        uniquify-separator "/"
        uniquify-after-kill-buffer-p t ; rename after killing uniquified
        uniquify-ignore-buffers-re "^\\*" ; don't mess with special buffers
        )
  )
#+end_src

** iBuffer mode
Use [[https://www.emacswiki.org/emacs/IbufferMode][ibuffer]] to show a filterable list of all open buffers. Similar to dired.
#+begin_src emacs-lisp
(use-package ibuffer
  :bind (("C-x C-b" . ibuffer)))
#+end_src

* Org-mode
Install [[https://orgmode.org/][org-mode]]. Configuration file is currently in a separate directory.
#+begin_src emacs-lisp
(use-package org
  :after counsel
  :straight t
  :bind (("C-c a" . org-agenda)
         (:map org-mode-map
               ("C-c C-j" . counsel-outline)))
  :config
  (use-package org-bullets :straight t)
  (let ((org-config-file (concat user-opt-directory "org-mode-config.el")))
    (if (file-exists-p org-config-file)
        (load org-config-file)))
  (add-hook 'org-mode-hook
            (lambda ()
              (visual-line-mode 1)
              (org-bullets-mode 1)))
  (setq org-use-speed-commands t))
#+end_src

** Org-reveal
Convert org-mode files to [[https://revealjs.com/][revealjs]] presentations via [[https://github.com/yjwen/org-reveal][org-reveal]].
#+begin_src emacs-lisp
(use-package ox-reveal
  :straight t
  :config
  (use-package htmlize :straight t)
  (setq org-reveal-root (concat "file://" (expand-file-name "~/opt/revealjs"))))
#+end_src

** Org-chef
Manage local recipes via [[https://github.com/Chobbes/org-chef][org-chef]].
#+begin_src emacs-lisp
(use-package org-chef
  :straight t)
#+end_src

** Org-mime
At some point I had installed [[https://github.com/org-mime/org-mime][org-mime]], but maybe it is obsolete now? I am not sure.
*** TODO Figure out if we really need this.
#+begin_src emacs-lisp
(use-package org-mime
  :straight t)
#+end_src

** Org-noter and org-pdftools
At some point I had installed org-pdftools but I am not sure if I use it any more.
*** TODO Figure out if we really need this.
#+begin_src emacs-lisp
(use-package org-noter
  :straight t)
#+end_src

I used to use org-pdfview but apparently it is unmaintained.
*** TODO Figure out if we really need this.
#+begin_src emacs-lisp
(use-package org-pdfview
  :straight t
  :config
  (add-to-list 'org-file-apps '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link)))))
#+end_src

** Calfw
I don't use this anymore.
#+begin_src emacs-lisp
  ;; (use-package calfw
  ;;   :straight t)
  ;; (use-package calfw-org
  ;;   :straight t)
#+end_src

* Colour themes and prettification
Use Zenburn as the colour theme.
#+begin_src emacs-lisp
(use-package zenburn-theme
  :straight t
  :config
  (zenburn-with-color-variables
    (custom-theme-set-faces
     'zenburn
     `(mu4e-replied-face ((t (:foreground ,zenburn-fg))))
     `(hl-line-face ((t (:background ,zenburn-bg-2))))
     `(hl-line ((t (:background ,zenburn-bg-2))))))
  (load-theme 'zenburn t)
  )
#+end_src

Use [[https://github.com/domtronn/all-the-icons.el][all-the-icons]].
#+begin_src emacs-lisp
(use-package all-the-icons
  :straight t)

(use-package all-the-icons-dired
  :straight t
  :config
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

(use-package all-the-icons-ivy
  :straight t
  :config
  (all-the-icons-ivy-setup))
#+end_src
Use [[https://elpa.gnu.org/packages/rainbow-mode.html][rainbow-mode]] to show colours under colour names.
#+begin_src emacs-lisp
(use-package rainbow-mode
  :straight t
  :mode "\\.\\(el|scss|sass\\)")
#+end_src
Goodies for [[https://www.emacswiki.org/emacs/DiredMode][dired]].
#+begin_src emacs-lisp
  (use-package dired-sidebar
    :straight t
    :bind (("C-x C-d" . dired-sidebar-toggle-sidebar))
    :commands
    (dired-sidebar-toggle-sidebar))
  
  (use-package dired-narrow
    :straight t
    :bind (:map dired-mode-map
                ("/" . dired-narrow)))
#+end_src
Use [[https://github.com/Alexander-Miller/treemacs][treemacs]]. I don't use this as much anymore.
#+begin_src emacs-lisp
  (use-package treemacs
    :straight t
    :bind (:map global-map
                ([f8] . treemacs-select-window))
    :custom
    (add-to-list 'treemacs-pre-file-insert-predicates #'treemacs-is-file-git-ignored?))
  
  (use-package treemacs-magit
    :after treemacs magit
    :straight t)
#+end_src

Prettify various symbols.
*** TODO Revisit prettified symbols.
#+begin_src emacs-lisp
(global-prettify-symbols-mode 1)
(add-hook 'org-mode-hook
          (lambda ()
            (push '("[ ]" . "⬜") prettify-symbols-alist)
            (push '("[X]" . "✔") prettify-symbols-alist)
            (push '("TODO" . "⬜") prettify-symbols-alist)
            (push '("DONE" . "✔") prettify-symbols-alist)
            (push '("CANCELLED" . "✘") prettify-symbols-alist)
            (push '("WAITING" . "⏳") prettify-symbols-alist)
            (push '("SHELVED" . "⭮") prettify-symbols-alist)
            (push '("BORROWED" . "💰") prettify-symbols-alist)
            (push '("RETURNED" . "✔") prettify-symbols-alist)
            (push '("ONGOING" . "🏃") prettify-symbols-alist)))
#+end_src

Use [[https://github.com/Malabarba/beacon][beacon-mode]] to show where the cursor is. Does not seem to work at the moment.
*** TODO Fix beacon-mode.
#+begin_src emacs-lisp
  ;; (use-package beacon-mode
  ;;   :straight (:host github :repo "Malabarba/beacon")
  ;;   :config
  ;;   (beacon-mode 1))
#+end_src


** Highlight indent guides
#+begin_src emacs-lisp
    (use-package highlight-indent-guides
      :straight t
      :config
      (setq highlight-indent-guides-method 'character
            highlight-indent-guides-responsive 'top)
      (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+end_src

* Editing
#+begin_src emacs-lisp
(use-package smartparens
  :straight t
  :config
  (show-paren-mode 1)
  (setq show-paren-style 'parenthesis)
  (use-package smartparens-config)
  (smartparens-global-mode 1))

(use-package parinfer
  :straight t
  :init
  (progn
    (setq parinfer-extensions
          '(defaults))))


(electric-indent-mode 1)
(electric-layout-mode 1)
(global-hl-line-mode 1)

(use-package volatile-highlights
  :straight t
  :config (volatile-highlights-mode 1))

(setq-default indent-tabs-mode nil)     ;Don't use tabs to indent...
(setq-default tab-width 8)         ;...but maintain correct appearance

(setq ispell-program-name "aspell"
      ispell-extra-args '("--sug-mode=ultra"))
(autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." )
#+end_src

** God mode
#+begin_src emacs-lisp
(use-package god-mode
  :straight t
  :bind ("<escape>" . god-mode-all)
  :config
  (god-mode)
  (add-hook 'post-command-hook #'ab/god-mode-update-cursor-type))

(defun ab/god-mode-update-cursor-type ()
  (setq cursor-type
        (if (or god-local-mode buffer-read-only) 'bar 'box)))
#+end_src



** RYO modal
(use-package ryo-modal
  :straight t
  :commands ryo-modal-mode
  :bind ("C-c SPC" . ryo-modal-mode)
  :config
  (ryo-modal-keys
   (:mode 'org-mode)
   ("n" org-next-visible-heading)
   ("p" org-previous-visible-heading))
  )
** Objed
#+begin_src emacs-lisp
(use-package objed
  :straight t)
#+end_src

** Multiple cursors
#+begin_src emacs-lisp
(use-package multiple-cursors
  :straight t
  :bind (("C-c m c" . mc/edit-lines)
         ("C-c m n" . mc/mark-next-like-this)
         ("C-c m p" . mc/mark-previous-like-this)
         ("C-c m a" . mc/mark-all-like-this)))
#+end_src

** Toggle comments function
#+begin_src emacs-lisp
(defun toggle-comment-line-or-region (&optional arg)
  "Toggle commenting on current line or region (ARG), then go to the next line."
  (interactive)
  (if (region-active-p)
      (comment-or-uncomment-region (region-beginning) (region-end))
    (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
  (forward-line))
#+end_src


** Outshine mode
#+begin_src emacs-lisp
(use-package outshine
  :straight t
  :init
  (defvar outline-minor-mode-prefix "\M-#")
  :config
  (setq outshine-use-speed-commands t)
  (add-hook 'prog-mode-hook 'outshine-mode)
  (add-hook 'LaTeX-mode-hook 'outshine-mode))
#+end_src

** Browse kill ring
#+begin_src emacs-lisp
(use-package browse-kill-ring
  :straight t)
#+end_src

* Minibuffer and search
** Ivy, etc
#+begin_src emacs-lisp
  (use-package avy
    :straight t
    :bind (("M-s" . avy-goto-char-timer)))
  
  (use-package ivy
    :straight t
    :bind (("C-c C-r" . ivy-resume)
           ("C-c v" . ivy-push-view)
           ("C-c V" . ivy-pop-view))
    :config
    (use-package ivy-hydra :straight t)
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t))
  
  (use-package swiper
    :straight t
    :bind (("C-s" . swiper-isearch)))
  
  (use-package counsel
    :straight t
    :bind (("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("C-x C-g" . counsel-git)
           ("C-h v" . counsel-describe-variable)
           ("C-h f" . counsel-describe-function)))
  
  (use-package ivy-prescient
    :straight t
    :config
    (ivy-prescient-mode))
  
  (use-package ivy-rich
    :straight t
    :after ivy
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer 'ivy-rich--ivy-switch-buffer-transformer)
    (ivy-rich-mode 1))
  
  (use-package wgrep
    :straight t
    :after ivy)
#+end_src

** Other goodies
#+begin_src emacs-lisp
(use-package which-key :straight t
  :config
  (which-key-mode 1))

(use-package smart-mode-line
  :straight t
  :config
  (progn (sml/setup)))
#+end_src


** Embark
#+begin_src emacs-lisp
  (use-package embark
    :straight t
    :bind
    (("C-." . embark-act)
     ("M-." . embark-dwim)
     ("C-h B" . embark-bindings))
    :config
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))
#+end_src

* Global keybindings
#+begin_src emacs-lisp
  (global-set-key [f1]          'revert-buffer)
  (global-set-key [f2]          'goto-line)
  (global-set-key [f5]          'query-replace)
  (global-set-key [home]        'beginning-of-line)
  (global-set-key [end]         'end-of-line)
  (global-set-key [C-home]      'beginning-of-buffer)
  (global-set-key [C-end]       'end-of-buffer)
  (global-set-key (kbd "C-;")   'toggle-comment-line-or-region)
  ;; (global-set-key (kbd "C-x C-j") 'jekyll-new-post)
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+end_src

* Backup and cleanup
** Back up files
#+begin_src emacs-lisp
  (setq backup-by-copying t
        delete-old-versions t
        kept-old-versions 2
        kept-new-versions 2
        version-control t)
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+end_src

** Delete old backup files
#+begin_src emacs-lisp
(defun delete-old-backup-files ()
  "Delete backup files that have not been accessed in a month."
  (let ((month (* 60 60 24 7 30))
        (current (float-time (current-time))))
    (dolist (file (directory-files temporary-file-directory t))
      (when (and (backup-file-name-p file)
                 (> (- current (float-time (nth 5 (file-attributes file))))
                    month))
        (message "%s" file)
        (delete-file file)))))
(delete-old-backup-files)
#+end_src

** Clean up old buffers.
#+begin_src emacs-lisp
  (use-package midnight)
#+end_src


* Completion
#+begin_src emacs-lisp
(use-package company
  :straight t
  :config
  (global-company-mode 1))

(use-package company-prescient
  :straight t
  :config
  (company-prescient-mode))
#+end_src

* Git
#+begin_src emacs-lisp
(use-package magit
  :straight t
  :bind (([f6] . magit-status)))
#+end_src

** Diff-hl
#+begin_src emacs-lisp
(use-package diff-hl
  :straight t
  :custom
  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  :config
  (global-diff-hl-mode)
  (diff-hl-flydiff-mode 1))
#+end_src

* Programming
** Projects and jumping
#+begin_src emacs-lisp
(use-package counsel-projectile
  :straight t
  :config
  (define-key projectile-mode-map (kbd "M-p") 'projectile-command-map)
  (counsel-projectile-mode 1))

(use-package dumb-jump
  :straight t
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g b" . dumb-jump-back))
  :config
  (setq dumb-jump-selector 'ivy))
#+end_src

** Assorted packages
*** Conf-mode
#+begin_src emacs-lisp
(use-package conf-mode
  :mode ("rc$"))
#+end_src

*** Dokuwiki-mode
#+begin_src emacs-lisp
(use-package dokuwiki-mode
  :straight t)
#+end_src

*** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :straight t
  :config
  (global-flycheck-mode)
  (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+end_src

*** Graphviz
#+begin_src emacs-lisp
(use-package graphviz-dot-mode
  :straight t
  :config
  (use-package company-graphviz-dot)
  (setq graphviz-dot-indent-width 4))
#+end_src

*** Haskell
#+begin_src emacs-lisp
(use-package haskell-mode
  :straight t
  :config
  (add-hook 'haskell-mode-hook
            'turn-on-haskell-indentation))
#+end_src

*** LaTeX etc

#+begin_src emacs-lisp
(defun ab/normalise-bib ()
  (interactive)
  (shell-command-on-region
   (point-min) (point-max)
   "bibtool -r ~/Bibliography/rules.rsc" t t "*Messages*"))

(use-package auctex
  :straight t
  :init
  (use-package bibretrieve
    :straight (:host github :repo "asilata/bibretrieve")
    :config
    (add-hook
     'bibretrieve-pre-write-bib-items-hook
     'ab/normalise-bib
     ))
  (use-package auctex-latexmk
    :straight t
    :config
    (auctex-latexmk-setup))
  :defer t
  :bind (([f7] . TeX-error-overview))
  :config
  (use-package reftex :straight t
    :config
    (setq reftex-default-bibliography "~/Bibliography/math.bib"))
  (use-package smartparens-latex)
  (set-default 'preview-scale-function 2))

(use-package cdlatex
  :straight t)

(add-hook 'LaTeX-mode-hook
          (lambda ()
	    (TeX-global-PDF-mode 1)
            (flyspell-mode 1)
            (auto-fill-mode 0)
            (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
            (TeX-source-correlate-mode 1)
            (visual-line-mode 1)
            (yas-minor-mode 0)
            (reftex-mode 1)
            ))

(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

(use-package ivy-bibtex
  :straight t
  :config
  (setq ivy-re-builders-alist '((ivy-bibtex . ivy--regex-ignore-order)
                                (t . ivy--regex-plus)))
  (setq bibtex-completion-notes-path "~/Org/Roam/Bibnotes")
  (setq bibtex-completion-bibliography '("~/Bibliography/math.bib"))
  (setq bibtex-completion-library-path '("~/Papers"))
  (ivy-set-display-transformer
   'org-ref-ivy-insert-cite-link
   'ivy-bibtex-display-transformer)
  )
#+end_src

*** Lean
#+begin_src emacs-lisp
(use-package lean-mode
  :straight t
  :config
  (setq lean-rootdir "~/opt/lean-nightly-linux"))
#+end_src

*** Lisp
#+begin_src emacs-lisp
(use-package lisp-mode
  :init
  (progn
    (use-package eldoc
      :init (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode))
    (font-lock-add-keywords 'emacs-lisp-mode
                            '(("use-package" . font-lock-keyword-face)))))
#+end_src

*** Macaulay 2
#+begin_src emacs-lisp
(load "emacs-Macaulay2.el" t)
#+end_src

*** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :straight t
  :mode ("\\.\\(m\\(ark\\)?down\\|md\\|txt\\)$" . markdown-mode)
  :config
  (add-hook 'markdown-mode-hook
            (lambda ()
              (orgtbl-mode 1))))
#+end_src

*** Ox-tufte
#+begin_src emacs-lisp
(use-package ox-tufte :straight t)
#+end_src
*** Sage
#+begin_src emacs-lisp
(use-package sage-shell-mode
  :straight t
  :config
  (setq sage-shell:sage-executable (substring (shell-command-to-string "which sage") 0 -1))
  (sage-shell:define-alias)
  (setq sage-shell:use-prompt-toolkit t))
#+end_src

*** Scratch
#+begin_src emacs-lisp
(use-package scratch
  :straight t)
#+end_src
*** SCSS
#+begin_src emacs-lisp
  (use-package scss-mode
    :straight t
    ;; :mode "\\.\\(scss|sass\\)"
    :config
    (add-hook 'scss-mode-hook
              (lambda ()
                (setq scss-compile-at-save nil))))
#+end_src

*** Singular
#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/share/Singular/emacs")
(autoload 'singular "singular"
  "Start Singular using default values." t)
(autoload 'singular-other "singular"
  "Ask for arguments and start Singular." t)
(setq auto-mode-alist (cons '("\\.sing\\'" . c++-mode) auto-mode-alist))
#+end_src

*** Textile
#+begin_src emacs-lisp
(use-package textile-mode
  :straight t
  :mode ("\\.textile\\'" . textile-mode)
  :config
  (add-hook 'textile-mode-hook
            'turn-on-orgtbl))
#+end_src

*** Web-mode
#+begin_src emacs-lisp
(use-package web-mode
  :straight t
  :mode ("\\.html?\\'" . web-mode)
  :config
  (setq web-mode-enable-auto-pairing t
        web-mode-enable-auto-pairing t))
#+end_src

*** YAML
#+begin_src emacs-lisp
(use-package yaml-mode
  :straight t)
#+end_src

*** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :straight t
  :config
  (yas-global-mode 1))
#+end_src

** Jekyll stuff (new post function, modified from hyde-mode's version)
I don't use this anymore.
#+begin_src emacs-lisp
  ;; (defun jekyll-new-post (title directory)
  ;;   "Create a new post titled TITLE in DIRECTORY."
  ;;   (interactive "MEnter post title: \nDEnter directory to save in: ")
  ;;   (let ((post-file-name (expand-file-name (format "%s/%s.markdown"
  ;;                                                   directory
  ;;                                                   (concat (format-time-string "%Y-%m-%d-") (downcase (replace-regexp-in-string " " "-" title)))))))
  ;;     (find-file post-file-name)
  ;;     (insert "---\n")
  ;;     (insert (format "title: \"%s\"\n" title))
  ;;     (insert (format "date: \"%s\"\n" (format-time-string "%Y-%m-%d %H:%M:%S %z")))
  ;;     (insert "---\n\n")
  ;;     (markdown-mode)))
#+end_src

* Email
** mu4e
#+begin_src emacs-lisp
(use-package mu4e
  :straight
  (:host github :repo "djcb/mu" :branch "release/1.6"
         :pre-build
         (("meson" "build") ("ninja" "-C" "build"))
         :files (:defaults "build/mu4e/*"))
  :defer nil
  :custom   (mu4e-mu-binary (expand-file-name "build/mu/mu" (straight--repos-dir "mu")))
  :bind (("C-c p" . mml-secure-message-sign-pgpmime))
  :config
  (require 'mu4e-contrib)
  (let ((mu4e-config-file (concat user-opt-directory "mu4e-config.el")))
    (if (file-exists-p mu4e-config-file)
        (load mu4e-config-file))))
#+end_src

** GPG
#+begin_src emacs-lisp
  (setq epg-gpg-program "gpg2")
#+end_src

* Elfeed
I don't use elfeed as much as I should these days.
#+begin_src emacs-lisp
  (use-package elfeed
    :straight t
    :config
    (require 'elfeed-link)
    (use-package elfeed-org :straight t)
    (elfeed-org)
    (setq rmh-elfeed-org-files '("~/.elfeed/elfeed.org"))
    (setq elfeed-search-title-max-width 1000)
    (setq elfeed-use-curl nil))
#+end_src

* PDF tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :straight t
    :bind (:map pdf-view-mode-map
                (("C-s" . isearch-forward)))
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-width))
  
  (use-package pdf-tools-org
    :straight (:host github :repo "machc/pdf-tools-org"))
#+end_src


* Endnotes
** Load local settings if they exist.
#+begin_src emacs-lisp
(when (file-exists-p local-config-directory)
  (mapc 'load (directory-files local-config-directory 't "^[^#].*el$")))
#+end_src

** New custom file (for the output of custom-set-variables, etc).
#+begin_src emacs-lisp
(setq custom-file (concat local-config-directory "custom.el"))
(unless (file-exists-p custom-file)
  (write-region "" nil custom-file))
(load custom-file)
#+end_src

** Recompile all previously byte-compiled files in the directory.
#+begin_src emacs-lisp
(byte-recompile-directory user-emacs-directory)
#+end_src

** Add package.el just so that package-list-packages includes them
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
#+end_src


* Setup
#+name: reload-init
#+begin_src emacs-lisp :tangle no
  (defun reload-init ()
    (load-file user-init-file))
#+end_src

[[elisp:(reload-init)][Click to reload init file.]]

# Local variables:
# eval: (add-hook 'after-save-hook 'org-babel-tangle nil t)
# End:


** Local variables
#+begin_src emacs-lisp
  ;; Local Variables:
  ;; byte-compile-warnings: (not free-vars callargs cl-functions)  
  ;; End:
#+end_src
