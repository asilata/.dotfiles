# -*- eval: (add-hook 'after-save-hook 'org-babel-tangle nil t) -*-
#+title: Emacs init file
#+author: Asilata Bapat
#+property: header-args:emacs-lisp :tangle "~/.emacs.d/init.el" :results silent
#+startup: overview hideblocks

[[elisp:(progn (org-babel-tangle) (load-file user-init-file))][Click to tangle and reload init file.]]

* Initial boilerplate
Define values for the top-level emacs directory (~.emacs.d~), as well as the subdirectories for optional packages and machine-local configuration.
#+begin_src emacs-lisp
  (require 'cl-lib)
  
  (unless (boundp 'user-emacs-directory)
    (defvar user-emacs-directory "~/.emacs.d/"
      "Root directory of the emacs configuration."))
  (defvar user-opt-directory (concat user-emacs-directory "opt/")
    "User-installed Emacs packages go here.")
  (defvar local-config-directory (concat user-emacs-directory "local/")
    "Machine-local configuration files go here.")
#+end_src

Create the above directories if they don't exist.
#+begin_src emacs-lisp
  (mapc (lambda (dir)
          (unless (file-exists-p dir)
            (make-directory dir)))
        (list user-emacs-directory user-opt-directory local-config-directory))
  
  (add-to-list 'load-path user-opt-directory)
  (let ((default-directory user-opt-directory))
    (normal-top-level-add-subdirs-to-load-path))
#+end_src

* Package management
I manage my emacs packages with [[https://github.com/raxod502/straight.el][straight]].
First, download and bootstrap straight as per the instructions [[https://github.com/raxod502/straight.el#getting-started][here]].
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

Install [[https://github.com/jwiegley/use-package][use-package]] if not installed.
#+begin_src emacs-lisp
(straight-use-package 'use-package)
#+end_src

* Window management
** EXWM
I use [[https://github.com/ch11ng/exwm][exwm]] as my window manager.
Begin by starting the emacs server.
#+begin_src emacs-lisp
  (unless (and (fboundp 'server-running-p) (server-running-p)) (server-start))
#+end_src

Install exwm and load its configuration. The configuration is written below, and shows up in place of ~<<exwm-config>>~.
#+begin_src emacs-lisp :noweb no-export
  (use-package exwm
    :straight t
    :config
    (require 'exwm-randr)
    (setq exwm-randr-workspace-output-plist '(1 "HDMI-1"))
    (add-hook 'exwm-randr-screen-change-hook
              (defun ab/exwm-randr ()
                (start-process-shell-command
                 "xrandr" nil "xrandr --output eDP-1 --output HDMI-1")))
    (exwm-randr-enable)
    <<exwm-config>>
    (exwm-enable))
#+end_src

*** EXWM configuration
:properties:
:header-args:emacs-lisp: :noweb-ref exwm-config :tangle no
:end:

Code for better (?) buffer names.
#+begin_src emacs-lisp
(defun exwm-rename-buffer ()
  (interactive)
  (exwm-workspace-rename-buffer
   (concat exwm-class-name ":"
           (if (<= (length exwm-title) 50) exwm-title
             (concat (substring exwm-title 0 49) "...")))))

(add-hook 'exwm-update-class-hook 'exwm-rename-buffer)
(add-hook 'exwm-update-title-hook 'exwm-rename-buffer)
      #+end_src

Useful keybindings.
      #+begin_src emacs-lisp
(setq exwm-input-global-keys
      `(
        ;; 's-q': Reset (to line-mode).
        ([?\s-q] . exwm-reset)
        ;; 's-w': Switch workspace.
        ([?\s-w] . exwm-workspace-switch)
        ;; 's-r': Launch application.
        ([?\s-r] . (lambda (command)
                     (interactive (list (read-shell-command "$ ")))
                     (start-process-shell-command command nil command)))
        ([?\s-f] . flip-window)))

(push '?\s-n exwm-input-prefix-keys)
(push '?\s-p exwm-input-prefix-keys)
#+end_src
Install [[https://github.com/agzam/exwm-edit][exwm-edit]] so that we can edit text blocks from other programs in emacs.
#+begin_src emacs-lisp
(use-package exwm-edit
  :straight t)
#+end_src

** Ace-window
[[https://github.com/abo-abo/ace-window][Ace-window]] is good for navigating between windows quickly, as well as switching windows.
#+begin_src emacs-lisp
  (use-package ace-window
    :straight t
    :bind (("C-x o" . ace-window))
    :custom
    (aw-keys '(?a ?o ?e ?u ?h ?t ?n ?s ?i ?d))
    (aw-minibuffer-flag t)
    (ace-window-display-mode t)
    :custom-face
    (aw-leading-char-face ((t (:inherit font-lock-keyword-face :bold t :height 3.0))))
    )
#+end_src

** Buffer actions, etc
Work in progress, following some ideas from [[https://www.masteringemacs.org/article/demystifying-emacs-window-manager][Mastering Emacs' post]].
#+begin_src emacs-lisp
  (setq switch-to-buffer-obey-display-actions t)
#+end_src

** Popper
Use [[https://github.com/karthink/popper][popper]] to manage ephemeral windows as "popups".
#+begin_src emacs-lisp
  (use-package popper
    :straight t
    :bind (("C-`" . popper-toggle-latest)
           ("M-`" . popper-cycle)
           ("C-M-`" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "Output\\*$"
            "\\*Apropos\\*"
            ("\\*Async Shell Command\\*" . hide)
            help-mode
            compilation-mode
            "magit-log"
            ("magit-diff" . hide)
            "Zoom:chat"
            "\\*Calendar\\*"
            "\\*Agenda Commands\\*"
            "Plasmashell"
            ))
    (popper-mode +1)
    (popper-echo-mode +1))
#+end_src

** Miscellaneous
Function to jump to the other window. Currently not used much.
#+begin_src emacs-lisp
(defun flip-window ()
  (interactive)
  (let ((win (get-mru-window t t t)))
    (if win
        (progn
          (select-frame-set-input-focus (window-frame win))
          (select-window win))
      (mode-line-other-buffer))))
#+end_src

Use tab-bar-mode, and display the project name in the tab bar.
#+begin_src emacs-lisp
(defun ab/tab-bar-name ()
    (let ((project-name (projectile-project-name))
          (old-name (tab-bar-tab-name-current-with-count)))
      (if (string= "-" project-name)
          old-name
        (concat project-name ": " old-name))))

(use-package tab-bar-mode
  :bind (("s-n" . tab-next)
         ("s-p" . tab-previous))
  :config
  (setq tab-bar-tab-name-function 'ab/tab-bar-name))
#+end_src

* Buffer customizations
Remove all bells and whistles. This code is /old/, from back when I first started seriously customising emacs. I might revisit this at some point.
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)
  (line-number-mode 1)
  (column-number-mode 1)
  (size-indication-mode 1)
  (setq fill-column 90)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq visible-bell t)
  
  (if (fboundp 'fringe-mode) (fringe-mode 4))
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1)
  (setq frame-title-format
        '("" invocation-name " - " (:eval (if (buffer-file-name)
                                              (abbreviate-file-name (buffer-file-name))
                                            (buffer-name))
                                          "%b")))
#+end_src

Auto-revert buffers from files.
#+begin_src emacs-lisp
  (setq global-auto-revert-mode 1)
  (setq auto-revert-interval 3600)
#+end_src

Uniquify buffer names.
#+begin_src emacs-lisp
(use-package uniquify
  :config
  (setq uniquify-buffer-name-style 'forward
        uniquify-separator "/"
        uniquify-after-kill-buffer-p t ; rename after killing uniquified
        uniquify-ignore-buffers-re "^\\*" ; don't mess with special buffers
        )
  )
#+end_src

** iBuffer mode
Use [[https://www.emacswiki.org/emacs/IbufferMode][ibuffer]] to show a filterable list of all open buffers. Similar to dired.
#+begin_src emacs-lisp
(use-package ibuffer
  :bind (("C-x C-b" . ibuffer)))
#+end_src

** Explain pauses
Use [[https://github.com/lastquestion/explain-pause-mode][explain-pause-mode]] to explain slowness in emacs.
#+begin_src emacs-lisp
  (use-package explain-pause-mode
    :straight t
    :config
    (explain-pause-mode))
#+end_src

* Org-mode
Install [[https://orgmode.org/][org-mode]].
The configuration is written in the next section, and shows up in place of ~<<org-mode-config>>~ in the snippet below.
#+begin_src emacs-lisp :noweb no-export
  (use-package org
    :after counsel
    :straight t
    :bind (("C-c a" . org-agenda)
           (:map org-mode-map
                 ("C-c C-j" . consult-org-heading)))
    :config
    <<org-mode-config>>
    (add-hook 'org-mode-hook
              (lambda ()
                (visual-line-mode 1)
                (org-cdlatex-mode 1)))
    (setq org-use-speed-commands t))
#+end_src

Here are some org-related packages.
*** Org-modern
#+begin_src emacs-lisp
  (use-package org-modern
    :straight t
    :config
    (add-hook 'org-mode-hook #'org-modern-mode))
#+end_src
*** Org-reveal
Convert org-mode files to [[https://revealjs.com/][revealjs]] presentations via [[https://github.com/yjwen/org-reveal][org-reveal]].
#+begin_src emacs-lisp
(use-package ox-reveal
  :straight t
  :config
  (use-package htmlize :straight t)
  (setq org-reveal-root (concat "file://" (expand-file-name "~/opt/revealjs"))))
#+end_src

*** Org-chef
Manage local recipes via [[https://github.com/Chobbes/org-chef][org-chef]].
#+begin_src emacs-lisp
(use-package org-chef
  :straight t)
#+end_src

*** Org-mime
At some point I had installed [[https://github.com/org-mime/org-mime][org-mime]], but maybe it is obsolete now? I am not sure.
**** TODO Figure out if we really need this.
#+begin_src emacs-lisp
(use-package org-mime
  :straight t)
#+end_src
*** Org-msg
More in the [[https://github.com/jeremy-compostella/org-msg][org-msg repository]].
#+begin_src emacs-lisp
    (setq mail-user-agent 'mu4e-user-agent)
    (use-package org-msg :straight t
      :custom
      (org-msg-options "html-postamble:nil num:nil toc:nil author:nil email:nil tex:dvipng")
      (org-msg-greeting-fmt "\nHi%s,\n\n")
      (org-msg-default-alternatives '((new		. (text html))
                                      (reply-to-html	. (text html))
                                      (reply-to-text	. (text))))
      )
#+end_src
*** Org-noter and org-pdftools
At some point I had installed org-pdftools but I am not sure if I use it any more.
**** TODO Figure out if we really need this.
#+begin_src emacs-lisp
  ;; (use-package org-noter
  ;;   :straight t)
#+end_src

I used to use org-pdfview but apparently it is unmaintained. Replace with [[https://github.com/fuxialexander/org-pdftools][org-pdftools]]?
**** TODO Figure out if we really need this.
#+begin_src emacs-lisp
(use-package org-pdfview
  :straight t
  :config
  (add-to-list 'org-file-apps '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link)))))
#+end_src

*** Org-download
#+begin_src emacs-lisp
  (use-package org-download
    :straight t
    :custom
    ;;(org-download-screenshot-method "spectacle -b -n -r -o %s")
    (org-download-screenshot-method "gm import %s")
    (org-download-image-dir "assets/"))
#+end_src
** TODO Org-mode configuration
:properties:
:header-args:emacs-lisp: :noweb-ref org-mode-config :tangle no
:end:
This section contains all the configuration options for org-mode.
All the source blocks in this section have the common header-arg ~:noweb-ref org-mode-config~, which means that they will be concatenated and inserted if another source block calls ~<<org-mode-config>>~.
Currently this has just been copied over from the older ~org-mode-config.el~ file.
More updates and documentation coming soon.
*** Org files locations
#+begin_src emacs-lisp
  (setq org-default-directory "~/Org/"
        org-shared-directory "~/Org-shared/")
  (setq org-roam-directory (concat org-default-directory "Roam/"))
  (setq org-default-notes-file (concat org-default-directory "todo.org"))
  (setq org-agenda-files
        (append (file-expand-wildcards (concat org-default-directory "*.org"))
                (file-expand-wildcards (concat org-shared-directory "*.org"))
                (directory-files-recursively (concat org-default-directory "Projects") org-agenda-file-regexp)
                (directory-files-recursively (concat org-default-directory "Teaching") org-agenda-file-regexp)
                `(,(concat org-roam-directory "meetings.org")
                  ,(concat org-roam-directory "calculations.org"))
                ))
  (setq org-attach-id-dir "~/Org/data")
#+end_src

*** Org-present
See [[https://github.com/rlister/org-present][github repository for org-present]].
#+begin_src emacs-lisp
  (use-package org-present :straight t)
#+end_src

*** Global options for notes and refiling
#+begin_src emacs-lisp
(setq org-log-done t)
(setq org-log-state-notes-insert-after-drawers t)
(setq org-refile-targets
      `((org-agenda-files :maxlevel . 5)
        (,(concat org-roam-directory "meetings.org") :maxlevel . 5)
        (,(concat org-roam-directory "calculations.org") :maxlevel . 5)))
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
#+end_src

*** Keywords
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "WAITING(w@)" "|" "DONE(d)" "CANCELLED(c@)" "SHELVED(s)" "MEETING(m)" "ONGOING(o)")))

(setq org-todo-keyword-faces
      '(("TODO" org-todo)
	("DONE" org-done)
        ("WAITING" :foreground "#F0DFAF" :weight bold)
	("CANCELLED" :foreground "#CC9393" :weight bold)
        ("SHELVED" :foreground "#DFAF8F" :weight bold)
        ("MEETING" :foreground "#8CD0D3" :weight bold)
        ("ONGOING" :foreground "#DC8CC3" :weight bold :italic t)
        ("BOOKMARK" :foreground "#DC8CC3" :weight bold)
        ("READING" :foreground "#F0DFAF" :weight bold)
        ))
#+end_src

*** Tags
#+begin_src emacs-lisp
(setq org-tag-persistent-alist
      '((:startgroup . nil)
        ("work" . ?w)
        ("service" . ?s)
        ("personal" . ?p)
        (:endgroup . nil)
        ("longterm" . ?l)
        ("reading" . ?r)
        ("annoying" . ?a)
        ("shared" . ?h)
        ("email" . ?e)
        ("shopping" . ?b)
        ))

(setq org-tag-faces
      '(("work" . (:foreground "#8CD0D3" :weight bold))
        ("service" . (:foreground "#8CD0D3" :weight bold))
        ("personal" . (:foreground "#8CD0D3" :weight bold))))
#+end_src

*** Captures
#+begin_src emacs-lisp
(global-set-key (kbd "C-c c") 'org-capture)
#+end_src

*** Clock goodies
Here are some custom functions for clocking (work in progress!). 
#+begin_src emacs-lisp :results silent
  (defun ab/insert-past-clock()
    "Insert past clock into the current header"
    (let* ((scheduled (org-element-property :scheduled (org-element-at-point)))
           (start (org-get-scheduled-time (org-entry-get nil "SCHEDULED")))
           (duration-in-minutes (ab/org-timestamp-range-duration-in-minutes scheduled)))
      (if (and scheduled start (> duration-in-minutes 0))
          (progn (org-clock-in nil start)
                 (org-clock-out nil nil (time-add start (* 60 duration-in-minutes))))
        )))

  (defun ab/org-timestamp-range-duration-in-minutes (ts)
     (if (member (org-element-property :type ts) '(active-range inactive-range))
         (/ (time-subtract (org-timestamp-to-time ts 'end) (org-timestamp-to-time ts)) 60)
       nil))

  (add-hook 'org-after-todo-state-change-hook
          (lambda ()
            (when (string= org-state "DONE")
              (save-excursion
                (org-back-to-heading)
                (ab/insert-past-clock)))))
#+end_src

**** Orca
#+begin_src emacs-lisp
(use-package orca
  :straight t
  :config
  (setq orca-handler-list
        `((orca-handler-current-buffer
           "\\* Tasks")
          (orca-handler-file
           ,(concat org-default-directory "bookmarks.org")
           "\\* Bookmarks"))))
#+end_src

*** Org files customization
#+begin_src emacs-lisp
(setq org-cycle-separator-lines 1)
#+end_src

*** Syntax highlighting
#+begin_src emacs-lisp
(setq org-highlight-latex-and-related '(latex))
#+end_src

*** Global export options
#+begin_src emacs-lisp
  (use-package ox-pandoc :straight t)
  (setq org-export-with-toc nil
        org-export-with-smart-quotes t)
  (defun ab/org-export-dwim ()
      (interactive)
    (save-excursion
      (while (and (not (org-before-first-heading-p))
                  (not (org-entry-get nil "export_file_name")))
        (org-previous-visible-heading 1))
      (org-latex-export-to-pdf t (org-get-heading))))
  
  (define-key org-mode-map (kbd "C-c e") 'ab/org-export-dwim)
#+end_src

*** LaTeX
#+begin_src emacs-lisp
  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes
                 '("amsart" "\\documentclass[a4paper]{amsart}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

#+begin_src emacs-lisp
  (setq org-latex-pdf-process '("latexmk -shell-escape -f -pdf -%latex -interaction=nonstopmode -output-directory=%o %f"))
  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted")))
#+end_src

*** Agenda customization
**** Viewing options
#+begin_src emacs-lisp :results silent
  (setq org-agenda-window-setup 'current-window)
  (setq org-deadline-warning-days 7)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
  (setq org-log-done t)
  (setq org-pretty-entities nil)
  (setq org-columns-default-format "%50ITEM(Task) %9TODO %10CLOCKSUM_T(Time today) %10CLOCKSUM(Time total) %10EFFORT(Effort)")
#+end_src

**** Custom agendas
#+begin_src emacs-lisp :results none
  (setq org-agenda-custom-commands
        '(("w" "Work view"
           ((agenda "" ((org-agenda-span 'day)
                        (org-super-agenda-groups
                         '((:discard (:tag "personal"))
                           (:name "Important"
                                  :and (:priority "A" :not (:date today))
                                  :order 2)
                           (:order-multi (3 (:name "Email"
                                                   :and (:not (:scheduled today) :tag "email"))
                                            (:name "Red tape"
                                                   :and (:not (:scheduled today) :tag "redtape"))
                                            ))
                           (:name "Today's schedule"
                                  :time-grid t
                                  :todo "TODO")
                           (:auto-planning t)))))
            (agenda "" ((org-agenda-span 'week)
                        (org-agenda-start-day "+1d")
                        (org-agenda-start-on-weekday nil)                        
                        (org-super-agenda-groups
                         '((:discard (:tag "personal"))
                           (:discard (:tag "email"))
                           (:anything t)))))
            (todo "ONGOING|WAITING|TODO|SHELVED"
                  ((org-agenda-overriding-header "Other tasks:")
                   (org-agenda-todo-ignore-deadlines 'all)
                   (org-agenda-todo-ignore-scheduled 'all)
                   (org-super-agenda-groups
                    '((:discard (:tag "personal"))
                      (:name "Reading list"
                             :and (:tag "toread" :todo "TODO"))
                      (:todo "WAITING")                    
                      (:todo "ONGOING")
                      (:todo "TODO")
                      (:todo "SHELVED")
                      (:auto-todo t)))))
            ))
          ("p" "Personal view"
           ((agenda "" ((org-agenda-span 'day)
                        (org-super-agenda-groups
                         '((:discard (:not (:tag "personal")))
                           (:order-multi (2 (:name "Email" :tag "email")
                                            (:name "Red tape" :tag "redtape")))
                           (:name "Today's schedule"
                                  :time-grid t
                                  :todo "TODO")
                           (:auto-planning t)))))
            (agenda "" ((org-agenda-span 'week)
                      (org-agenda-start-day "+1d")
                      (org-agenda-start-on-weekday nil)                        
                      (org-super-agenda-groups
                       '((:discard (:not (:tag "personal")))
                         (:anything t)))))
            (tags-todo ".*"
                ((org-agenda-overriding-header "Other tasks:")
                 (org-agenda-todo-ignore-deadlines 'all)
                 (org-agenda-todo-ignore-scheduled 'all)
                 (org-super-agenda-groups
                  '((:discard (:not (:tag "personal")))
                    (:todo "WAITING")                    
                    (:todo "ONGOING")
                    (:todo "TODO")
                    (:todo "SHELVED")
                    (:auto-todo t)))))))
          ("c" "Comprehensive view"
           ((agenda "" ((org-agenda-overriding-header "Today's Schedule:")
                        (org-agenda-span 'day)
                        (org-agenda-ndays 1)
                        (org-agenda-start-on-weekday nil)
                        (org-agenda-start-day "+0d")
                        (org-agenda-todo-ignore-deadlines nil)))
            (todo "ONGOING|WAITING|TODO"
                  ((org-agenda-overriding-header "Unscheduled tasks:")
                   (org-agenda-todo-ignore-deadlines 'all)
                   (org-agenda-todo-ignore-scheduled 'all)))

            (agenda "" ((org-agenda-overriding-header "Upcoming week:")
                        (org-agenda-span 'week)
                        (org-agenda-start-day "+1d")
                        (org-agenda-start-on-weekday nil)
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled 'todo '("WAITING" "DONE")))
                        ;;(org-agenda-prefix-format '((agenda . " %-12:c%?-12t %s%b ")))
                                         ))
            (todo "SHELVED"
                  ((org-agenda-overriding-header "Shelved tasks:")
                   (org-agenda-todo-ignore-deadlines 'all)
                   (org-agenda-todo-ignore-scheduled 'all)))
            ))))
#+end_src

**** Org super agenda
#+begin_src emacs-lisp
  (use-package org-super-agenda
    :straight t
    :init
    (org-super-agenda-mode))
#+end_src

#+begin_src emacs-lisp :results silent
  (setq org-super-agenda-groups
        '((:discard (:category "fun"))
          (:todo "WAITING")                    
          (:todo "ONGOING")          
          (:todo "TODO")
          (:todo "SHELVED")
          (:auto-todo t)
          ))
#+end_src

*** Google calendar integration
#+begin_src emacs-lisp
  ;; (use-package org-gcal
  ;;   :straight t
  ;;   :config
  ;;   (setq org-gcal-client-id
  ;;         (string-trim
  ;;          (shell-command-to-string "gpg2 -dq ~/.emacs.d/org-gcal/.org-gcal-client-id.gpg")))
  ;;   (setq org-gcal-client-secret
  ;;         (string-trim
  ;;          (shell-command-to-string "gpg2 -dq ~/.emacs.d/org-gcal/.org-gcal-client-secret.gpg")))
  ;;   (setq org-gcal-file-alist `(("asilata@gmail.com" .
  ;;                                ,(concat org-default-directory "calendar.org"))
  ;;                               ("es2hibml3t2m5le9nl83lq0boo@group.calendar.google.com" .
  ;;                                ,(concat org-default-directory "algtop.org"))))
  ;;   (setq org-gcal-up-days 7)
  ;;   (setq org-gcal-down-days 7)
  ;;   ;;(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-fetch)))
  ;;   )

  (setq calendar-latitude 149.13)
  (setq calendar-longitude -35.28)
  (setq calendar-location-name "Canberra")
#+end_src

#+RESULTS:
: Canberra

*** Encryption
#+begin_src emacs-lisp
(use-package org-crypt
  :config
  (setq org-crypt-key "D93ED1F5")
  (setq org-crypt-disable-auto-save t))
#+end_src

*** Org babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((latex . t)
     (dot . t)
     (emacs-lisp . t)
     (python . t)
     (shell . t)
     (org . t)
     (sass . t)))
  (setq org-confirm-babel-evaluate nil)
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
#+end_src

Source code editing setup.
#+begin_src emacs-lisp
  (setq org-src-window-setup 'split-window-below)
#+end_src

*** Org journal
#+begin_src emacs-lisp
(use-package org-journal
  :straight t
  :config
  (setq org-journal-dir (concat org-default-directory "journal/"))
  (setq org-journal-enable-encryption t)
  (setq org-journal-file-format "%Y-%m-%d.org")
  )
#+end_src

*** Org ref
#+begin_src emacs-lisp
(use-package org-ref
  :straight t
  :config
  (setq
   org-ref-default-bibliography '("~/Bibliography/math.bib")
   org-ref-pdf-directory "~/Papers/"
   org-ref-completion-library 'org-ref-ivy-cite
   org-ref-notes-function 'org-ref-notes-function-many-files))
#+end_src

*** Org-cite
#+begin_src emacs-lisp
  (use-package citeproc
    :straight t)
  (setq org-cite-global-bibliography '("/home/asilata/Bibliography/math.bib"))
#+end_src

*** Org roam
See the [[https://www.orgroam.com/][org-roam website]].
#+begin_src emacs-lisp
  (use-package org-roam
    :hook (after-init . org-roam-setup)
    :straight (:host github :repo "org-roam/org-roam")
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n t" . org-roam-dailies-capture-today)
           ("C-c n i" . org-roam-node-insert))
    :custom
    (org-roam-capture-templates
     (let* ((org-roam-file-name-format "%<%Y%m%d%H%M%S>-${slug}.org")
            (org-roam-common-head "#+title: ${title}\n#+created: %U\n")
            (org-roam-notes-head "\n* Comments\n\n* References\n\n")
            (orb-title-format "${title} (${author})")
            (orb-file-name-format "Bibnotes/${citekey}.org")
            (orb-front-matter "#+created: %U\n\n")
            (orb-common-head (concat "#+title: " orb-title-format "\n" orb-front-matter)))
       `(("d" "default" plain "* Notes\n%?"
          :target (file+head ,org-roam-file-name-format ,(concat org-roam-common-head org-roam-notes-head))
          :unnarrowed t)
         ("l" "link" plain "* Notes\n"
          :target (file+head ,org-roam-file-name-format ,(concat org-roam-common-head org-roam-notes-head))        
          :immediate-finish t)
         ("p" "person" plain "%?"
          :target (file+head "People/${slug}.org" ,org-roam-common-head)
          :immediate-finish t)
         ("r" "ref" plain "* Notes\n** What are the main ingredients?\n** What is the main result?\n** What goes into the proof?\n%?"
          :target (file+head ,orb-file-name-format ,orb-common-head)
          :unnarrowed t)
         )))
  (org-roam-dailies-directory "Dailies/")
  (org-roam-dailies-capture-templates
   (let* ((daily-title-format "%<%Y-%m-%d>")
          (daily-front-matter (concat "#+title: " daily-title-format "\n#+created: %U\n")))
     `(("d" "daily" entry "* %?"
        :if-new (file+head ,daily-title-format ,daily-front-matter)
        :olp ("Notes"))
       ("c" "calculation" entry "* %?"
        :if-new (file+head ,daily-title-format ,daily-front-matter)
        :olp ("Calculations"))
       ("m" "meeting" entry "* MEETING :meeting\n  - with :: %^{Meeting with}\n  %? "
        :if-new (file+head ,daily-title-format ,daily-front-matter)        
        :olp ("Meetings")
        :clock-in t :clock-resume t))))
  (org-roam-tag-sources '(prop all-directories))
  :config
  (org-roam-db-autosync-mode)
  (require 'org-roam-protocol)
  :init
  (setq org-roam-v2-ack t))
#+end_src

**** org-roam-ui
#+begin_src emacs-lisp
(use-package org-roam-ui
  :straight
  (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
    :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

**** org-roam-bibtex
See the git repository: [[https://github.com/org-roam/org-roam-bibtex][org-roam-bibtex]] and [[https://github.com/org-roam/org-roam-bibtex/blob/master/doc/orb-manual.org][the manual]].
#+begin_src emacs-lisp
  (use-package org-roam-bibtex
    :after org-roam ivy-bibtex
    :straight t
    :bind (:map org-mode-map
                (("C-c n a" . orb-note-actions)))
    :custom
    (org-roam-bibtex-mode 1))
#+end_src
  
**** deft
#+begin_src emacs-lisp
(use-package deft
  :straight t
  :after org-roam
  :bind ("C-c n d" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory org-roam-directory)
  )
#+end_src


*** Org-brain
#+begin_src emacs-lisp
(use-package org-brain
  :straight t
  :init
  (setq org-brain-path (concat org-default-directory "Brain/"))
  :config
  (setq org-track-id-globally t)
  (setq org-id-locations-file (concat user-emacs-directory ".org-id-locations"))
  (push '("b" "Brain" plain (function org-brain-goto-end)
          "* %i%?" :empty-lines 1)
        org-capture-templates)
  (setq org-brain-visualize-default-choices 'all)
  (setq org-brain-title-max-length 12)
  (setq org-brain-include-file-entries t
        org-brain-file-entries-use-title t)
  (setq org-brain-file-from-input-function
        (lambda (x) (if (cdr x) (car x) (concat org-brain-path "default"))))
  )
#+end_src

*** Links and frames
#+begin_src emacs-lisp
  (setq org-link-frame-setup
        '((vm . vm-visit-folder-other-frame)
          (vm-imap . vm-visit-imap-folder-other-frame)
          (gnus . org-gnus-no-new-news)
          (file . find-file-other-window)
          (wl . wl-other-frame)))
#+end_src

*** Custom functions
**** Mark todo as done if all checkboxes are done
#+begin_src emacs-lisp
(defun auto-done-checkboxes ()
  (save-excursion
    (org-back-to-heading t)
    (let ((beg (point)) end)
      (end-of-line)
      (setq end (point))
      (goto-char beg)
      (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]" end t)
            (if (match-end 1)
                (if (equal (match-string 1) "100%")
                    ;; all done - do the state change
                    (org-todo 'done)
                  (org-todo 'todo))
              (if (and (> (match-end 2) (match-beginning 2))
                       (equal (match-string 2) (match-string 3)))
                  (org-todo 'done)
                (org-todo 'todo)))))))

(eval-after-load 'org-list
  '(add-hook 'org-checkbox-statistics-hook (function auto-done-checkboxes)))
#+end_src

*** Private settings (including capture templates)
#+begin_src emacs-lisp
(let ((org-private-settings (concat user-opt-directory "private/org-private-settings.el")))
  (if (file-exists-p org-private-settings)
      (load org-private-settings)))
#+end_src


* Colour themes and prettification
** Zenburn
Use Zenburn as the colour theme.
#+begin_src emacs-lisp
  (use-package zenburn-theme
    :straight t
    :config
    (zenburn-with-color-variables
      (custom-theme-set-faces
       'zenburn
       `(mu4e-replied-face ((t (:foreground ,zenburn-fg))))
       `(hl-line-face ((t (:background ,zenburn-bg-2))))
       `(hl-line ((t (:background ,zenburn-bg-2))))))
    (load-theme 'zenburn t)
    )
#+end_src

** All the icons
Use [[https://github.com/domtronn/all-the-icons.el][all-the-icons]].
#+begin_src emacs-lisp
(use-package all-the-icons
  :straight t)

(use-package all-the-icons-dired
  :straight t
  :config
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

(use-package all-the-icons-ivy
  :straight t
  :config
  (all-the-icons-ivy-setup))
#+end_src
** Rainbow mode
Use [[https://elpa.gnu.org/packages/rainbow-mode.html][rainbow-mode]] to show colours under colour names.
#+begin_src emacs-lisp
(use-package rainbow-mode
  :straight t
  :mode "\\.\\(el|scss|sass\\)")
#+end_src
** Dired
Goodies for [[https://www.emacswiki.org/emacs/DiredMode][dired]].
#+begin_src emacs-lisp
  (setq dired-listing-switches "-alh")
  (setq dired-mouse-drag-files t)

  (use-package dired-narrow
    :straight t
    :bind (:map dired-mode-map
                ("/" . dired-narrow)))
  (use-package dired-collapse
    :straight t
    :custom
    (dired-collapse-mode t))

  (use-package dired-subtree
    :straight t
    :bind
    (:map dired-mode-map
          ("i" . dired-subtree-toggle)))
#+end_src

Prettify various symbols.
*** TODO Revisit prettified symbols.
#+begin_src emacs-lisp
(global-prettify-symbols-mode 1)
(add-hook 'org-mode-hook
          (lambda ()
            (push '("[ ]" . "⬜") prettify-symbols-alist)
            (push '("[X]" . "✔") prettify-symbols-alist)
            (push '("TODO" . "⬜") prettify-symbols-alist)
            (push '("DONE" . "✔") prettify-symbols-alist)
            (push '("CANCELLED" . "✘") prettify-symbols-alist)
            (push '("WAITING" . "⏳") prettify-symbols-alist)
            (push '("SHELVED" . "⭮") prettify-symbols-alist)
            (push '("BORROWED" . "💰") prettify-symbols-alist)
            (push '("RETURNED" . "✔") prettify-symbols-alist)
            (push '("ONGOING" . "🏃") prettify-symbols-alist)))
#+end_src

Use [[https://github.com/Malabarba/beacon][beacon-mode]] to show where the cursor is. Does not seem to work at the moment.
*** TODO Fix beacon-mode.
#+begin_src emacs-lisp
  ;; (use-package beacon-mode
  ;;   :straight (:host github :repo "Malabarba/beacon")
  ;;   :config
  ;;   (beacon-mode 1))
#+end_src


** Highlight indent guides
#+begin_src emacs-lisp
    (use-package highlight-indent-guides
      :straight t
      :config
      (setq highlight-indent-guides-method 'character
            highlight-indent-guides-responsive 'top)
      (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+end_src

* Editing
#+begin_src emacs-lisp
(use-package smartparens
  :straight t
  :config
  (show-paren-mode 1)
  (setq show-paren-style 'parenthesis)
  (use-package smartparens-config)
  (smartparens-global-mode 1))

(use-package parinfer
  :straight t
  :init
  (progn
    (setq parinfer-extensions
          '(defaults))))


(electric-indent-mode 1)
(electric-layout-mode 1)
(global-hl-line-mode 1)

(use-package volatile-highlights
  :straight t
  :config (volatile-highlights-mode 1))

(setq-default indent-tabs-mode nil)     ;Don't use tabs to indent...
(setq-default tab-width 8)         ;...but maintain correct appearance

(setq ispell-program-name "aspell"
      ispell-extra-args '("--sug-mode=ultra"))
(autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." )
#+end_src

** Objed
#+begin_src emacs-lisp
(use-package objed
  :straight t)
#+end_src

** Multiple cursors
#+begin_src emacs-lisp
(use-package multiple-cursors
  :straight t
  :bind (("C-c m c" . mc/edit-lines)
         ("C-c m n" . mc/mark-next-like-this)
         ("C-c m p" . mc/mark-previous-like-this)
         ("C-c m a" . mc/mark-all-like-this)))
#+end_src

** Toggle comments function
#+begin_src emacs-lisp
(defun toggle-comment-line-or-region (&optional arg)
  "Toggle commenting on current line or region (ARG), then go to the next line."
  (interactive)
  (if (region-active-p)
      (comment-or-uncomment-region (region-beginning) (region-end))
    (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
  (forward-line))
#+end_src


** Outshine mode
#+begin_src emacs-lisp
(use-package outshine
  :straight t
  :init
  (defvar outline-minor-mode-prefix "\M-#")
  :config
  (setq outshine-use-speed-commands t)
  (add-hook 'prog-mode-hook 'outshine-mode)
  (add-hook 'LaTeX-mode-hook 'outshine-mode))
#+end_src

** Browse kill ring
#+begin_src emacs-lisp
(use-package browse-kill-ring
  :straight t)
#+end_src

* Minibuffer and search
** Ivy, etc
Currently I only use [[https://github.com/abo-abo/avy][avy]] out of all the packages in the ivy ecosystem.
#+begin_src emacs-lisp
  (use-package avy
    :straight t)

  ;; (use-package wgrep
  ;;   :straight t
  ;;   :after ivy)
#+end_src

** Selectrum
#+begin_src emacs-lisp
  ;; (use-package selectrum
  ;;   :straight t
  ;;   :config
  ;;   (use-package selectrum-prescient :straight t)
  ;;   :custom
  ;;   (selectrum-prescient-mode +1)
  ;;   (prescient-persist-mode +1)
  ;;   :init
  ;;   (selectrum-mode +1))
#+end_src

** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :straight t
    :init
    (vertico-mode)
    :config
    (vertico-multiform-mode))
#+end_src

** Consult
At the moment this is taken straight from the [[https://github.com/minad/consult][consult readme example]]. Will be tweaked later.
#+begin_src emacs-lisp
  (use-package consult
    :straight t
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ;;("C-c h" . consult-history)
           ;;("C-c m" . consult-mode-command)
           ;;("C-c b" . consult-bookmark)
           ;;("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ;; Custom M-# bindings for fast register access
           ;;("M-#" . consult-register-load)
           ;;("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ;;("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ;; ("M-s f" . consult-find)
           ;; ("M-s F" . consult-locate)
           ;; ("M-s g" . consult-grep)
           ;; ("M-s G" . consult-git-grep)
           ;; ("M-s r" . consult-ripgrep)
           ;; ("M-s l" . consult-line)
           ("C-s"   . consult-line)                    ;; isearch alternative
           ;; ("M-s L" . consult-line-multi)
           ;; ("M-s m" . consult-multi-occur)
           ;; ("M-s k" . consult-keep-lines)
           ;; ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ;; ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi))           ;; needed by consult-line to detect isearch

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI. You may want to also
    ;; enable `consult-preview-at-point-mode` in Embark Collect buffers.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
     :preview-key "M-.")

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (project-roots)
    ;;(setq consult-project-root-function
    ;; (lambda ()
    ;;   (when-let (project (project-current))
    ;;     (car (project-roots project)))))
    ;;;; 2. projectile.el (projectile-project-root)
    (autoload 'projectile-project-root "projectile")
    (setq consult-project-root-function #'projectile-project-root)
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-root-function #'vc-root-dir)
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
  )

#+end_src

*** Consult reftex
#+begin_src emacs-lisp
  (use-package consult-reftex
    :straight (:host github :repo "karthink/consult-reftex"))
#+end_src

*** Citar
#+begin_src emacs-lisp
  (use-package citar
    :straight t
    :bind (("C-c b" . citar-insert-citation)
           :map minibuffer-local-map
           ("M-b" . citar-insert-preset))
    :config
    (use-package citar-embark
      :straight t
      :after citar embark
      :no-require
      :config (citar-embark-mode))
    :custom
    (citar-bibliography '("~/Bibliography/math.bib")))
#+end_src

*** Consult dir
#+begin_src emacs-lisp
  (use-package consult-dir
    :straight t
    :bind (("C-x C-d" . consult-dir)
           :map minibuffer-local-completion-map
           ("C-x C-d" . consult-dir)
           ("C-x C-j" . consult-dir-jump-file)))
#+end_src
** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :straight t
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src

** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :straight t
    :custom
    (completion-styles '(orderless))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Savehist
#+begin_src emacs-lisp
  (use-package savehist
    :straight t
    :init
    (savehist-mode))
#+end_src
** Embark
#+begin_src emacs-lisp
  (use-package embark
    :straight t
    :bind
    (("C-." . embark-act)
     ("M-." . embark-dwim)
     ("C-h B" . embark-bindings))
    :config
    (use-package embark-consult :straight t)
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none))))
    (add-to-list 'vertico-multiform-categories '(embark-keybinding grid))

    ;; Use embark-like help everywhere
    (setq prefix-help-command #'embark-prefix-help-command)
    :custom
    (embark-indicators
     '(embark-minimal-indicator
       embark-highlight-indicator
       embark-isearch-highlight-indicator)
    ))
#+end_src

** Other goodies
#+begin_src emacs-lisp 
 (use-package smart-mode-line
    :straight t
    :custom
    (sml/name-width 40)
    (sml/mode-width 'full)
    :config
    (progn (sml/setup)))
#+end_src

*** Key-chord mode
See [[https://github.com/emacsorphanage/key-chord][key-chord]]
#+begin_src emacs-lisp
  (use-package key-chord :straight t
    :after avy org
    :config
    (key-chord-define-global "hh" 'avy-goto-char-timer)
    (key-chord-mode 1)
    )
#+end_src

* Global keybindings
#+begin_src emacs-lisp
  (global-set-key [f1]          'revert-buffer)
  (global-set-key [f2]          'goto-line)
  (global-set-key [f5]          'query-replace)
  (global-set-key [home]        'beginning-of-line)
  (global-set-key [end]         'end-of-line)
  (global-set-key [C-home]      'beginning-of-buffer)
  (global-set-key [C-end]       'end-of-buffer)
  (global-set-key (kbd "C-;")   'toggle-comment-line-or-region)
  ;; (global-set-key (kbd "C-x C-j") 'jekyll-new-post)
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+end_src

* Backup and cleanup
** Back up files
#+begin_src emacs-lisp
  (setq backup-by-copying t
        delete-old-versions t
        kept-old-versions 2
        kept-new-versions 2
        version-control t)
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+end_src

** Delete old backup files
#+begin_src emacs-lisp
(defun delete-old-backup-files ()
  "Delete backup files that have not been accessed in a month."
  (let ((month (* 60 60 24 7 30))
        (current (float-time (current-time))))
    (dolist (file (directory-files temporary-file-directory t))
      (when (and (backup-file-name-p file)
                 (> (- current (float-time (nth 5 (file-attributes file))))
                    month))
        (message "%s" file)
        (delete-file file)))))
(delete-old-backup-files)
#+end_src

** Clean up old buffers.
#+begin_src emacs-lisp
  (use-package midnight)
#+end_src


** Recentf mode
#+begin_src emacs-lisp
  (recentf-mode 1)
#+end_src
* Completion
#+begin_src emacs-lisp
(use-package company
  :straight t
  :config
  (global-company-mode 1))

(use-package company-prescient
  :straight t
  :config
  (company-prescient-mode))
#+end_src

* Git
#+begin_src emacs-lisp
(use-package magit
  :straight t
  :bind (([f6] . magit-status)))
#+end_src

** Diff-hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :straight t
    :config
    (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
    (global-diff-hl-mode)
    (diff-hl-flydiff-mode 1))
#+end_src

* Programming
** Eglot
#+begin_src emacs-lisp
  (use-package eglot :straight t
    :hook (latex-mode . eglot-ensure))
#+end_src

** LaTeX etc
*** Bibliography
At the moment I am using bibretrieve, but this may change soon.
I am also using [[https://github.com/tmalsburg/helm-bibtex/blob/master/ivy-bibtex.el][ivy-bibtex]]. This may change soon.
#+begin_src emacs-lisp
  (defun ab/normalise-bib ()
    (interactive)
    (shell-command-on-region
     (point-min) (point-max)
     "bibtool -r ~/Bibliography/rules.rsc" t t "*Messages*"))

  (use-package bibretrieve
    :straight (:host github :repo "asilata/bibretrieve")
    :config
    (add-hook
     'bibretrieve-pre-write-bib-items-hook
     'ab/normalise-bib))

  (use-package ivy-bibtex
    :straight t
    :config
    (setq ivy-re-builders-alist '((ivy-bibtex . ivy--regex-ignore-order)
                                  (t . ivy--regex-plus)))
    (setq bibtex-completion-notes-path "~/Org/Roam/Bibnotes")
    (setq bibtex-completion-bibliography '("~/Bibliography/math.bib"))
    (setq bibtex-completion-library-path '("~/Papers"))
    (ivy-set-display-transformer
     'org-ref-ivy-insert-cite-link
     'ivy-bibtex-display-transformer))
#+end_src

*** Auctex
#+begin_src emacs-lisp
  (use-package auctex
    :straight t
    :init
    (use-package auctex-latexmk
      :straight t
      :config
      (auctex-latexmk-setup))
    :defer t
    :bind (([f7] . TeX-error-overview))
    :config
    (use-package smartparens-latex)
    (set-default 'preview-scale-function 2))
#+end_src

*** Latexmk setup
Wrapper function to set the latexmk previewer to emacs. It reverts the buffer if already visiting the output pdf file, and otherwise displays it (in another window). See the [[file:latexmkrc][latexmkrc]] file for where it is used.
#+begin_src emacs-lisp
  (defun ab/pdf-preview (filename)
    "Preview filename in its own buffer and revert the buffer."
    (let ((buf (find-buffer-visiting filename)))
      (progn 
        (if buf (with-current-buffer buf (pdf-view-revert-buffer nil t)))
        (display-buffer (or buf (find-file-noselect filename))))))
#+end_src

*** Reftex
#+begin_src emacs-lisp
  (use-package reftex :straight t
               :custom
               (reftex-default-bibliography "~/Bibliography/math.bib")
               (reftex-ref-style-default-list '("Cleveref" "Default")))

  (use-package cdlatex
    :straight t
    :custom
    (cdlatex-takeover-parenthesis nil)
    (cdlatex-math-symbol-alist '((?> ("\\to" "\\Longrightarrow"))))
    (cdlatex-math-modify-alist '((?b "\\mathbb" nil t nil nil)
                                 (?f "\\mathfrak" "\\frak" t nil nil)
                                 (?o "\\operatorname" nil t nil nil)
                                 (?s "\\mathscr" "\\textscr" t nil nil))))

  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (TeX-global-PDF-mode 1)
              (flyspell-mode 1)
              (auto-fill-mode 0)
              (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
              (TeX-source-correlate-mode 1)
              (visual-line-mode 1)
              (yas-minor-mode 0)
              (reftex-mode 1)
              (cdlatex-mode 1)
              ))

  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

#+end_src

*** Math delimiters
The [[https://github.com/oantolin/math-delimiters][math-delimiters]] package for smart insertion of delimiters.
#+begin_src emacs-lisp
  (use-package math-delimiters
    :straight t
    :config
    (with-eval-after-load 'org
      (define-key org-mode-map "$" #'math-delimiters-insert))
    (with-eval-after-load 'tex
      (define-key TeX-mode-map "$" #'math-delimiters-insert))
    (with-eval-after-load 'cdlatex
      (define-key cdlatex-mode-map "$" nil)))
#+end_src
*** Lazytab
See https://github.com/karthink/lazytab.
#+begin_src emacs-lisp
  (use-package lazytab :straight (:host github :repo "karthink/lazytab"))
#+end_src
** Projects and jumping
#+begin_src emacs-lisp
  (use-package counsel-projectile
    :straight t
    :config
    (define-key projectile-mode-map (kbd "M-p") 'projectile-command-map)
    (counsel-projectile-mode 1))
#+end_src

** Assorted packages
*** Conf-mode
#+begin_src emacs-lisp
(use-package conf-mode
  :mode ("rc$"))
#+end_src

*** Dokuwiki-mode
#+begin_src emacs-lisp
(use-package dokuwiki-mode
  :straight t)
#+end_src

*** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :config
    (global-flycheck-mode)
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

  (flycheck-define-checker vale
    "A checker for prose"
    :command ("vale" "--output" "line"
              source)
    :standard-input nil
    :error-patterns
    ((error line-start (file-name) ":" line ":" column ":" (id (one-or-more (not (any ":")))) ":" (message) line-end))
    :modes (markdown-mode org-mode text-mode)
    )
  (add-to-list 'flycheck-checkers 'vale 'append)
#+end_src

*** Graphviz
#+begin_src emacs-lisp
(use-package graphviz-dot-mode
  :straight t
  :config
  (setq graphviz-dot-indent-width 4))
#+end_src

*** Haskell
#+begin_src emacs-lisp
(use-package haskell-mode
  :straight t
  :config
  (add-hook 'haskell-mode-hook
            'turn-on-haskell-indentation))
#+end_src

*** Lean
#+begin_src emacs-lisp
(use-package lean-mode
  :straight t
  :config
  (setq lean-rootdir "~/opt/lean-nightly-linux"))
#+end_src

*** Lisp
#+begin_src emacs-lisp
(use-package lisp-mode
  :init
  (progn
    (use-package eldoc
      :init (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode))
    (font-lock-add-keywords 'emacs-lisp-mode
                            '(("use-package" . font-lock-keyword-face)))))
#+end_src

*** Macaulay 2
#+begin_src emacs-lisp
(load "emacs-Macaulay2.el" t)
#+end_src

*** Magma
#+begin_src emacs-lisp
  (use-package magma-mode
    :straight t)
#+end_src
*** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :straight t
  :mode ("\\.\\(m\\(ark\\)?down\\|md\\|txt\\)$" . markdown-mode)
  :config
  (add-hook 'markdown-mode-hook
            (lambda ()
              (orgtbl-mode 1))))
#+end_src

*** Ox-tufte
#+begin_src emacs-lisp
(use-package ox-tufte :straight t)
#+end_src
*** Sage
#+begin_src emacs-lisp
(use-package sage-shell-mode
  :straight t
  :config
  (setq sage-shell:sage-executable (substring (shell-command-to-string "which sage") 0 -1))
  (sage-shell:define-alias)
  (setq sage-shell:use-prompt-toolkit t))
#+end_src

Add support for sage in org-mode.
#+begin_src emacs-lisp
  (use-package ob-sagemath
    :straight t
    :config
    ;; Ob-sagemath supports only evaluating with a session.
    (setq org-babel-default-header-args:sage '((:session . t)
                                               (:results . "output")))
    ;; C-c c for asynchronous evaluating (only for SageMath code blocks).
    (with-eval-after-load "org"
      (define-key org-mode-map (kbd "C-c x") 'ob-sagemath-execute-async)))
#+end_src

Docstring support
#+begin_src emacs-lisp
  (use-package poporg
    :straight (:host github :repo "asilata/poporg")
    :config
    (defun ab/poporg-edit-set-major-mode ()
      "Set the major mode of the poporg edit buffer. This function is intended to be called from within `poporg-edit-hook'. The variable `original-major-mode' is set locally by `poporg.el' before the `poporg-edit-hook' is run."
      (if (and original-major-mode (eq original-major-mode 'sage-shell:sage-mode))
            (rst-mode)
          (org-mode)))
    :custom
    (poporg-edit-hook '(ab/poporg-edit-set-major-mode)))
#+end_src
*** Scratch
#+begin_src emacs-lisp
(use-package scratch
  :straight t)
#+end_src
*** SCSS
#+begin_src emacs-lisp
  (use-package scss-mode
    :straight t
    ;; :mode "\\.\\(scss|sass\\)"
    :config
    (add-hook 'scss-mode-hook
              (lambda ()
                (setq scss-compile-at-save nil))))
#+end_src

*** Singular
#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/share/Singular/emacs")
(autoload 'singular "singular"
  "Start Singular using default values." t)
(autoload 'singular-other "singular"
  "Ask for arguments and start Singular." t)
(setq auto-mode-alist (cons '("\\.sing\\'" . c++-mode) auto-mode-alist))
#+end_src

*** Textile
#+begin_src emacs-lisp
(use-package textile-mode
  :straight t
  :mode ("\\.textile\\'" . textile-mode)
  :config
  (add-hook 'textile-mode-hook
            'turn-on-orgtbl))
#+end_src

*** Web-mode
#+begin_src emacs-lisp
(use-package web-mode
  :straight t
  :mode ("\\.html?\\'" . web-mode)
  :config
  (setq web-mode-enable-auto-pairing t
        web-mode-enable-auto-pairing t))
#+end_src

*** YAML
#+begin_src emacs-lisp
(use-package yaml-mode
  :straight t)
#+end_src

*** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :straight t
  :config
  (yas-global-mode 1))
#+end_src

* Email
** mu4e
#+begin_src emacs-lisp :noweb no-export
  (use-package mu4e
    :straight (:files (:defaults "build/mu4e/*"))
    :defer nil
    :custom   (mu4e-mu-binary (expand-file-name "build/mu/mu" (straight--repos-dir "mu")))
    :bind
    (:map mu4e-compose-mode-map
          ("C-c p" . mml-secure-message-sign-pgpmime)
          ("C-c r" . ab/mu4e-write-email-skeleton))
    :config
    (require 'mu4e-contrib)
    <<mu4e-config>>
    )
#+end_src
** mu4e configuration
:properties:
:header-args:emacs-lisp: :noweb-ref mu4e-config :tangle no
:end:
Currently copied over from the old mu4e configuration file. To be updated.
*** Getting mail
#+begin_src emacs-lisp
(setq mu4e-get-mail-command "mbsync -a"
      mu4e-update-interval (* 60 15))
(setq mu4e-change-filenames-when-moving t)
#+end_src

*** Sending mail
After a recent change, Office365 requires smtp to authenticate via xoauth2 to send email.
The code in this section is adapted from [[https://github.com/UvA-FNWI/M365-IMAP/issues/3#issuecomment-1309706315][this comment on github]].

The following function takes a username and token file and using the external command ~mutt_oauth2.py~ (see [[https://gitlab.com/muttmua/mutt/-/blob/master/contrib/mutt_oauth2.py.README][README]]), creates a base-64 encoded smtp token.
#+begin_src emacs-lisp
  (defun b64-encoded-smtp-token (user tokenfile)
    "Encode access token according to https://tinyurl.com/2s6ymrv6"
    (let ((access-token
           (substring (shell-command-to-string
                       (concat "mutt_oauth2.py " tokenfile)) 0 -1)))
      (base64-encode-string
       (concat "user=" user "auth=Bearer " access-token "") t)))
#+end_src

We create an association list containing user names and token files.
#+begin_src emacs-lisp
  (defvar token-files
  '(("u1055856@anu.edu.au" . "~/.local/u1055856@anu.edu.au.tokens")
    ("asilata@gmail.com" . "~/.local/asilata@gmail.com.tokens")))
#+end_src

We add the xoauth2 method to the supported methods.
#+begin_src emacs-lisp
  (add-to-list 'smtpmail-auth-supported 'xoauth2)
#+end_src

But to make it meaningful, we need to add a corresponding handler function.
#+begin_src emacs-lisp
  (cl-defmethod smtpmail-try-auth-method
    (process (_mech (eql xoauth2)) user password)
    (when-let* ((user-tokenfile (assoc user token-files))
                (smtp-token (b64-encoded-smtp-token user (cdr user-tokenfile))))
      (smtpmail-command-or-throw
       process (concat "AUTH XOAUTH2 " smtp-token) 235)))
#+end_src

Finally, we tell smtpmail about the servers that require authentication.
#+begin_src emacs-lisp
  (setq smtpmail-servers-requiring-authorization "")
#+end_src

#+begin_src emacs-lisp
(setq message-send-mail-function 'smtpmail-send-it
      smtpmail-smtp-service 587
      message-kill-buffer-on-exit t)
#+end_src

*** Email writing goodies
#+begin_src emacs-lisp
  (defun ab/mu4e-message-fetch-field (field-name)
    "Return the value of the header field whose type is FIELD-NAME."
    (save-excursion
      (save-restriction
        (message-narrow-to-headers)
        (message-fetch-field field-name))))

  (defun ab/recipient-to-name (name-email)
    "Convert the recipient name-email entry to a name."
    (cl-multiple-value-bind (name email) name-email
      (when name
        (let* ((split (split-string name ", " t))
               (first-name (if (= (length split) 2)
                               (cadr split)
                             (car (split-string name " " t)))))
          (capitalize first-name)))))

  (defun ab/join-strings-with-comma-and (strings &optional ox-comma)
    "Join a list of strings using comma, using an and for the last one."
    (cond ((= (length strings) 0)
           "")
          ((= (length strings) 1)
           (car strings))
          ((= (length strings) 2)
           (format "%s%s and %s" (car strings) (if ox-comma "," "")(cadr strings)))
          (t
           (format "%s, %s" (car strings) (ab/join-strings-with-comma-and (cdr strings) t)))
          )
    )
  (defun ab/mu4e-write-email-skeleton ()
    "Write the skeleton of an email message."
    (interactive)
    (let* ((recipients (mail-extract-address-components (ab/mu4e-message-fetch-field "to") t))
           (recipient-names (ab/join-strings-with-comma-and (remove nil (mapcar #'ab/recipient-to-name recipients)))))
      (message-goto-body)
      (insert "Hi ")
      (insert recipient-names)
      (insert ",\n\n")
      (save-excursion
        (insert "\n\nBest,\nAsilata\n\n")
        )
      ))
#+end_src

*** Private settings (user settings, contexts)
#+begin_src emacs-lisp
(let ((mu4e-private-settings (concat user-opt-directory "private/mu4e-private-settings.el")))
  (if (file-exists-p mu4e-private-settings)
      (load mu4e-private-settings)))
#+end_src

*** Indexing
#+begin_src emacs-lisp
(setq mu4e-index-cleanup t
      mu4e-index-lazy-check nil)
#+end_src

*** General view settings
#+begin_src emacs-lisp
  (setq mu4e-headers-date-format "  %_d %b %y"
        mu4e-headers-time-format "%_l:%M %P"
        mu4e-headers-fields
        '((:human-date . 12)
          (:flags . 4)
          (:size . 8)
          (:from-or-to . 20)
          (:thread-subject . nil))
        mu4e-headers-skip-duplicates t)
  (setq message-kill-buffer-on-exit t)
  (setq mu4e-use-fancy-chars t)
  (setq mu4e-split-view 'horizontal)
  (add-to-list 'display-buffer-alist
               `(,(regexp-quote mu4e-main-buffer-name)
                 display-buffer-same-window))
#+end_src

*** Message view settings
#+begin_src emacs-lisp
(setq mu4e-view-show-images t)
(setq mu4e-html2text-command 'mu4e-shr2text)
(setq mu4e-attachment-dir "/tmp")
(add-hook 'mu4e-view-mode-hook
          (lambda ()
            (local-set-key (kbd "<tab>") 'shr-next-link)
            (local-set-key (kbd "<backtab>") 'shr-previous-link)))
#+end_src

*** Message editing settings
#+begin_src emacs-lisp
(setq mu4e-compose-format-flowed t)
#+end_src


*** Bookmarks
#+begin_src emacs-lisp
  (setq mu4e-bookmarks
        '((:name  "Reasonable recent messages"
                  :query "date:6m..now AND to:asilata AND (maildir:/ANU/INBOX OR maildir:/Gmail/INBOX OR tag:\\\\Important) AND NOT flag:list"
                  :key ?r
                  :favorite t)
          (:name "Flagged"
                 :query "flag:flagged AND NOT (flag:trashed  OR maildir:\"ANU/Deleted Items\" OR maildir:\"/Gmail/[Gmail]/Bin\")"
                 :key ?f)          
          (:name "Today and unactioned"
                 :query "date:today..now AND (maildir:ANU/INBOX OR maildir:/Gmail/INBOX)"
                 :key ?t)
          (:name "Last week and unactioned"
                 :query "date:7d..now AND (maildir:ANU/INBOX OR maildir:/Gmail/INBOX)"
                 :key ?w)            
          (:name "Mailing lists"
                 :query "flag:list AND (maildir:/ANU/INBOX OR maildir:/Gmail/INBOX)"
                 :key ?l)
          (:name "Messages with images" :query "mime:image/*" :key ?p :hide t)))
#+end_src

*** Custom functions
(defun my/delete-without-trashing ()
  (let (tfolder (mu4e-get-trash-folder (mu4e-message-at-point)))
    (mu4e-mark-set refile tfolder)))
(define-key mu4e-headers-mode-map (kbd "C-!") 'my/delete-without-trashing)

*** Various hooks
#+begin_src emacs-lisp
  (add-hook 'mu4e-headers-found-hook
            (lambda () (setq truncate-lines t)))

  (add-to-list 'mu4e-view-actions
               '("retag message" . mu4e-action-retag-message) t)
  (add-to-list 'mu4e-headers-actions
               '("retag message" . mu4e-action-retag-message) t)

  (add-hook 'mu4e-compose-mode-hook
            (lambda ()
              (turn-off-auto-fill)
              (visual-line-mode 1)
              (use-hard-newlines -1)))

  (add-hook 'mu4e-mark-execute-pre-hook
    (lambda (mark msg)
      (cond ((member mark '(refile trash)) (mu4e-action-retag-message msg "-\\\\Inbox"))
            ((equal mark 'flag) (mu4e-action-retag-message msg "\\\\Starred"))
            ((equal mark 'unflag) (mu4e-action-retag-message msg "-\\\\Starred")))))
#+end_src

*** Maildirs shortcuts
#+begin_src emacs-lisp
  (setq mu4e-maildir-shortcuts
        '((:maildir "/ANU/INBOX" :key ?a)
          (:maildir "/Gmail/INBOX" :key ?g)
          (:maildir "/MIT" :key ?m)))
#+end_src

*** Org mode integration
#+begin_src emacs-lisp
(require 'mu4e-org)
(setq org-mu4e-link-query-in-headers-mode nil)
#+end_src

Desktop notifications
#+begin_src emacs-lisp
(use-package mu4e-alert
  :straight t
  :config
  (setq mu4e-alert-interesting-mail-query
        (concat
         "date:6m..now"
         "flag:unread"         
         "AND to:asilata"
         "AND (maildir:/ANU/INBOX OR maildir:/Gmail/INBOX OR tag:\\\\\\\\Important)"
         ))
  (mu4e-alert-set-default-style 'libnotify)
  (setq mu4e-alert-email-notification-types '(subjects))
  (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
  (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
  )
#+end_src

*** Endnotes

** GPG
#+begin_src emacs-lisp
  (setq epg-gpg-program "gpg2")
  (setq epg-pinentry-mode 'loopback)
#+end_src

* Elfeed
I don't use elfeed as much as I should these days.
#+begin_src emacs-lisp
  (use-package elfeed
    :straight t
    :config
    (require 'elfeed-link)
    (use-package elfeed-org :straight t)
    (elfeed-org)
    (setq rmh-elfeed-org-files '("~/.elfeed/elfeed.org"))
    (setq elfeed-search-title-max-width 1000)
    (setq elfeed-use-curl nil))
#+end_src

* PDF tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :straight t
    :bind (:map pdf-view-mode-map
                (("C-s" . isearch-forward)))
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-width))
  
  (use-package pdf-tools-org
    :straight (:host github :repo "machc/pdf-tools-org"))
#+end_src


* Endnotes
** Load local settings if they exist.
#+begin_src emacs-lisp
(when (file-exists-p local-config-directory)
  (mapc 'load (directory-files local-config-directory 't "^[^#].*el$")))
#+end_src

** New custom file (for the output of custom-set-variables, etc).
#+begin_src emacs-lisp
(setq custom-file (concat local-config-directory "custom.el"))
(unless (file-exists-p custom-file)
  (write-region "" nil custom-file))
(load custom-file)
#+end_src

** Recompile all previously byte-compiled files in the directory.
#+begin_src emacs-lisp
(byte-recompile-directory user-emacs-directory)
#+end_src

** Add package.el just so that package-list-packages includes them
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
#+end_src


** Local variables
#+begin_src emacs-lisp
  ;; Local Variables:
  ;; byte-compile-warnings: (not free-vars callargs cl-functions)  
  ;; End:
#+end_src

